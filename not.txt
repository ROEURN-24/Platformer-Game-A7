# Variable
# keyPressed = []
# SPEED = 7
# TIME = 10
# GRAVITY_FORCE = 9

# scroll_offset = 0
# obstacles = []
# WIN_WIDTH = 1920
# is_jumping = False 




def game():
        canvas.pack()
        canvas.bind_all("<KeyPress>", handle_key_press)
        canvas.bind_all("<KeyRelease>", handle_key_release)
        canvas.focus_set()
        

def create_obstacles():
        x1 =scroll_offset + 900  # Start the obstacle just outside the right edge of the screen
        x2 = x1 + random.randint(50, 400)  # Random width of the obstacle
        y1 = random.randint(250, 600)  # Random vertical position of the obstacle
        y2 = y1 + random.randint(20, 60)  # Random height of the obstacle
        return canvas.create_rectangle(x1, y1, x2, y2, fill="black", tags="wall")


def handle_key_press(event):
        global is_jumping, jump_count
        if event.keysym == "Left" and "Left" not in keyPressed:
            keyPressed.append("Left")
        elif event.keysym == "Right" and "Right" not in keyPressed:
            keyPressed.append("Right")
        elif event.keysym == "Up" and not is_jumping:
            is_jumping = True
            jump_count = 20
def handle_key_release(event):
        if event.keysym == "Left" and "Left" in keyPressed:
            keyPressed.remove("Left")
        elif event.keysym == "Right" and "Right" in keyPressed:
            keyPressed.remove("Right")

def move_player():
        global is_jumping, jump_count
        x, y = 0, 0
        if "Left" in keyPressed:
            x = -10
        elif "Right" in keyPressed:
            x = 10

        if is_jumping:
            y = -GRAVITY_FORCE
            jump_count -= 1
            if jump_count == 0:
                is_jumping = False

        if check_movement(player, x, y):
            canvas.move(player, x, y)
        scroll_screen(x)

        if not is_jumping:
            apply_gravity()

        root.after(20, move_player)
    
        if random.random() < 0.05:
            obstacle =create_obstacles()
            obstacles.append(obstacle)
    
    
def check_movement(item, dx=0, dy=0):
        item_coords = canvas.coords(item)
        new_x1 = item_coords[0] + dx + 50
        new_y1 = item_coords[1] + dy + 50
        new_x2 = item_coords[0] + dx - 50
        new_y2 = item_coords[1] + dy - 50

        overlapping_objects = canvas.find_overlapping(new_x1, new_y1, new_x2, new_y2)

        for wall_id in canvas.find_withtag("wall"):
            if wall_id in overlapping_objects:
                return False

        return True

def apply_gravity():
        if not check_movement(player, 0, GRAVITY_FORCE):
            return

        canvas.move(player, 0, GRAVITY_FORCE)
        scroll_screen(0)
def scroll_screen(x_direction):
        global scroll_offset
        player_coords = canvas.coords(player)
        x1, _ = player_coords

        if x_direction > 0 and x1 >= 300 - scroll_offset:
            scroll_offset += 40
            canvas.move(player, -10, 0)
            for obstacle in obstacles:
                canvas.move(obstacle, -10, 0)

        elif x_direction < 0 and x1 <= scroll_offset:
            scroll_offset -= 40
            canvas.move(player, 10, 0)
            for obstacle in obstacles:
                canvas.move(obstacle, 10, 0)    # winsound.PlaySound("sounds/music_game1.wav",winsound.SND_FILENAME | winsound.SND_ASYNC)
